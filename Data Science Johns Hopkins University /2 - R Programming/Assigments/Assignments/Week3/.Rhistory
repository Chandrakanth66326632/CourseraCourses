}
else stop("invalid state")
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData <- file[c(2, 7, 11, 17, 23)]
# 2  -> Hospital Name
# 7  -> State abv.
# 11 -> outcome = Heart Attack
# 17 -> outcome = Heart Failure
# 23 -> outcome = Pneumonia
# set readable col names
#http://www.dummies.com/how-to/content/how-to-sort-data-frames-in-r.html
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
#Check if valid state
if (state %in% filterData[,"state"])
{       # get where the valid rows with the information
dFrameFilter <- filterData[filterData[outcome] != "Not Available", ]
#getting correct order first by rate. In case of ties the name is use.
index <- order(dFrameFilter$name) # order by name
dFrameFilter <- dFrameFilter[index,]
index <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData <- dFrameFilter[index,]                  # The dataFrame ordered by outcome and name
allStates <- unique(dFrameFilter[,"state"]) # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
output <- rbind(output,data.frame(NA,state))
}
else
{
if(is.numeric(num))
{
name   <- getStateData[index,][,"name"][num]
}
else if(num == "best")
{
name   <- getStateData[index,][,"name"][1]
}
else # num == worst lets get the last element
{
name   <- tail(getStateData[index,], n=1)[,"name"]
}
output <- rbind(output,data.frame(name,state))
}
} # for(state in allStates)
output
}
else stop("invalid state")
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index <- order(dFrameFilter$name) # order by name
dFrameFilter <- dFrameFilter[index,]
index <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData <- dFrameFilter[index,]                  # The dataFrame ordered by outcome and name
allStates <- unique(dFrameFilter[,"state"]) # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
output <- rbind(output,data.frame(NA,state))
}
else
{
if(is.numeric(num))
{
name   <- getStateData[index,][,"name"][num]
}
else if(num == "best")
{
name   <- getStateData[index,][,"name"][1]
}
else # num == worst lets get the last element
{
name   <- tail(getStateData[index,], n=1)[,"name"]
}
output <- rbind(output,data.frame(name,state))
}
} # for(state in allStates)
output
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
dFrameFilter
head(dFrameFilter)
dFrameFilter[index,]
x <- dFrameFilter[index,]
getStateData <- x[x$state == "TX", c(1,2)]
getStateData
head(getStateData)
head(getStateData[index,])
head(getStateData[,index])
head(getStateData[index,][,"name"])
head(getStateData[,index][,"name"])
head(getStateData[,"name"])
head(getStateData[,"name"])
head(getStateData[,"name"])[2]
name <- head(getStateData[,"name"])[2]
name
output <- data.frame()
output
output <- rbind(output, data.frame(name,"TX"))
output
output <- rbind(output, data.frame(name,"LOL"))
output <- rbind(output, c(name,"LOL"))
output <- rbind(output, unname(data.frame(name,"LOL")))
data.frame <- unname(data.frame(name,"LOL"))
data.frame
output
output <- rbrind(output,data.frame)
output <- rbind(output,data.frame)
names(output) <- names(data.frame(name,"lol"))
output <- rbind(output, data.frame(name,"lol"))
output
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
output <- rbind(output,data.frame(NA,state))
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
newRow <- data.frame(name,state))       #create row to be added
names(newRow) <- names(output)
output <- rbind(output,newRow)
}
} # for(state in allStates)
output
}
else stop("invalid outcome")
}
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
output <- rbind(output,data.frame(NA,state))
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
newRow <- data.frame(name,state)       #create row to be added
names(newRow) <- names(output)
output <- rbind(output,newRow)
}
} # for(state in allStates)
output
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
output <- rbind(output,data.frame(NA,state))
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
newRow <- data.frame(name,state)       #create row to be added
names(newRow) <- names(output)
output <- rbind(output,newRow)
}
} # for(state in allStates)
output
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
name <- NA
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
}
newRow <- data.frame(name,state)       #create row to be added
names(ouput) <- names(newRow)
output <- rbind(output,newRow)
} # for(state in allStates)
output
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
name <- NA
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
}
newRow <- data.frame(name,state)       #create row to be added
names(newRow) <- names(output)
output <- rbind(output,newRow)
} # for(state in allStates)
output
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
name <- NA
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
}
newRow <- data.frame(name,state)       #create row to be added
names(newRow) <- names(output)
output <- rbind(output,newRow)
} # for(state in allStates)
names(output) <- c("hospital","state")
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
name <- NA
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
}
newRow <- data.frame(name,state)       #create row to be added
names(newRow) <- names(output)
output <- rbind(output,newRow)
} # for(state in allStates)
names(output) <- c("hospital","state")
output
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
dFrameFilter
allStates    <- unique(dFrameFilter[,"state"])
allStates
index <- order(allStates)
index
allStates[index,]
allStates[index]
allStates
allStatesallStates
allStates <- allStates[order(allStates),]
allStates <- allStates[order(allStates)]
allStates
rankall <- function(outcome, num = "best"){
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
valid_outcomes <- c("heart attack","heart failure","pneumonia")
# Check if the outcome is a valid one
if(outcome %in% valid_outcomes)
{
file              <- read.csv(file="outcome-of-care-measures.csv",colClasses = "character")
filterData        <- file[c(2, 7, 11, 17, 23)]
names(filterData) <- c("name","state","heart attack","heart failure","pneumonia")
dFrameFilter      <- filterData[filterData[outcome] != "Not Available", ] # get where the valid rows with the information
#getting correct order first by rate. In case of ties the name is use.
index        <- order(dFrameFilter$name)                   # order by name
dFrameFilter <- dFrameFilter[index,]
index        <- order(as.numeric(dFrameFilter[,outcome])) # order by outcome
orderData    <- dFrameFilter[index,]                      # The dataFrame ordered by outcome and name
allStates    <- unique(dFrameFilter[,"state"])            # a vector with all unique states
allStates    <- allStates[order(allStates)]               # order the vector of unique states
output <- data.frame()
for(state in allStates) # For all state in the unique list of states
{
getStateData <- orderData[orderData$state == state, c(1,2)] #get State data (name,state)
if(is.numeric(num) & nrow(getStateData) <= num)
{
name <- NA
}
else
{
if(is.numeric(num))      name   <- getStateData[,"name"][num]
else if(num == "best")   name   <- getStateData[,"name"][1]
else                     name   <- tail(getStateData, n=1)[,"name"] #worst
}
newRow <- data.frame(name,state)       #create row to be added
names(newRow) <- names(output)
output <- rbind(output,newRow)
} # for(state in allStates)
names(output) <- c("hospital","state")
output
}
else stop("invalid outcome")
}
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
